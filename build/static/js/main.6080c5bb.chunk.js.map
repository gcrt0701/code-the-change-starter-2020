{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","calculate_win.js","index.js"],"names":["Square","className","value","onClick","Board","squares","console","log","board","map","i","key","Game","useState","setBoard","stepNumber","setStepNumber","xIsNext","setXisNext","setClassName","winner","calculateWinner","play","handleClick","indexOf","ReactDom","render","document","getElementById"],"mappings":"gLAEA,IAQeA,EARA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAGjC,OACE,4BAAQF,UAAWA,EAAWE,QAASA,GAAvC,IAAkDD,EAAlD,MCQWE,EAXD,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,QAASF,EAAwB,EAAxBA,QAASF,EAAe,EAAfA,UAElCK,QAAQC,IAAIF,GACV,IAAMG,EAAQH,EAAQI,KAAI,SAACP,EAAOQ,GAAR,OAAe,kBAAC,EAAD,CAAQT,UAAWA,EAAUS,GAAIC,IAAKD,EAAGR,MAAOA,EAAOC,QAAS,kBAAMA,EAAQO,SAGvH,OACE,yBAAKT,UAAU,SAASO,ICwDbI,EA7DF,WAAM,MAISC,mBAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAJnE,mBAIVL,EAJU,KAIHM,EAJG,OAKmBD,mBAAS,GAL5B,mBAKVE,EALU,KAKEC,EALF,OAMaH,oBAAS,GANtB,mBAMVI,EANU,KAMDC,EANC,OAOiBL,mBAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAPnH,mBAOVZ,EAPU,KAOCkB,EAPD,KAUXC,ECfD,SAAyBf,GAC9B,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,GAAkB,MAAdL,EAAQK,IAAcA,EAAI,IAAM,GAC9BL,EAAQK,KAAOL,EAAQK,EAAI,IAAML,EAAQK,KAAOL,EAAQK,EAAI,GAC9D,OAAOL,EAAQK,GAInB,GAAiB,MAAdL,EAAQK,IAAcA,EAAI,GACvBL,EAAQK,KAAOL,EAAQK,EAAI,IAAML,EAAQK,KAAOL,EAAQK,EAAI,GAC9D,OAAOL,EAAQK,GAKrB,OAAIL,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOA,EAAQ,GAC/CA,EAAQ,GAGbA,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOA,EAAQ,GAC/CA,EAAQ,GAGV,KDRQgB,CAAgBb,GACzBc,EAAOL,EAAU,IAAM,IAoC7B,OACE,oCACE,2CACA,kBAAC,EAAD,CAAOhB,UAAWA,EAAWI,QAASG,EAAOL,QAAS,SAAAO,GAAC,OApCvC,SAACA,GACnB,GAAc,MAAVU,GAA8B,MAAZZ,EAAME,GAK1B,OAJAF,EAAME,GAAKY,EACXrB,EAAUS,GAAK,kBACfQ,GAAYD,QACZD,EAAcD,EAAa,GA+BgCQ,CAAYb,MACvE,yBAAKT,UAAU,gBACb,6BACE,4BAAQE,QAAS,kBA3BvBW,EAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAC1DE,EAAc,GACdE,GAAW,QACXC,EAAa,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,cAwBhG,gBAEF,4BArBU,MAAVC,EACK,WAAaA,GAGO,IAAzBZ,EAAMgB,QAAQ,MACT,WAGFP,EAAU,iBAAmB,qBE1CxCQ,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.6080c5bb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({className, value, onClick}) => {\r\n  //value corresponds to the current value of the square {\"X\", \"O\", or null}\r\n  //onClick is the function that determines what the program should do\r\n  return (\r\n    <button className={className} onClick={onClick}> {value} </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({squares, onClick, className}) => {\r\n  // TODO: Populate the board with squares\r\nconsole.log(squares);\r\n  const board = squares.map((value, i) => (<Square className={className[i]} key={i} value={value} onClick={() => onClick(i)}></Square>));\r\n\r\n\r\n  return (\r\n    <div className=\"board\">{board}</div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport { calculateWinner } from \"../calculate_win\";\r\nimport Board from \"./Board\";\r\n\r\n\r\nconst Game = () => {\r\n  // TODO: Set up states and functions: position of Xs and Os on board,\r\n  // step number, whether X is next, is there a win or tie, etc.\r\n  //Initiatlizes states [variableName, function] = useState(initialState)\r\n  const [board, setBoard] = useState([null, null, null, null, null, null, null, null, null]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const [className, setClassName] = useState([\"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\"]);\r\n\r\n  //Variables\r\n  const winner = calculateWinner(board);\r\n  const play = xIsNext ? \"X\" : \"O\";\r\n\r\n  //onClick function\r\n  const handleClick = (i) => {\r\n    if (winner == null && board[i] == null) {\r\n      board[i] = play;\r\n      className[i] = \"clicked squares\";\r\n      setXisNext(!xIsNext);\r\n      setStepNumber(stepNumber + 1);\r\n      return ;\r\n    }\r\n  };\r\n\r\n  //Resets the game\r\n  const jumpToStart = () => {\r\n    setBoard([null, null, null, null, null, null, null, null, null]);\r\n    setStepNumber(0);\r\n    setXisNext(true);\r\n    setClassName([\"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\", \"squares\"])\r\n  };\r\n\r\n  //Concludes game\r\n  const result = () => {\r\n    if (winner != null) {\r\n      return \"Winner: \" + winner;\r\n    }\r\n\r\n    if (board.indexOf(null) === -1) {\r\n      return \"Tie Game\";\r\n    }\r\n\r\n    return xIsNext ? \"Next Player: X\" : \"Next Player: O\";\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <h1>Tic Tac Toe</h1>\r\n      <Board className={className} squares={board} onClick={i => handleClick(i)} />\r\n      <div className='info-wrapper'>\r\n        <div>\r\n          <button onClick={() => jumpToStart()}>Go to Start</button>\r\n        </div>\r\n        <h3>{result()}</h3>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","export function calculateWinner(squares) {\r\n  for (let i = 0; i < 7; i++) {\r\n    if (squares[i] != null && i % 3 === 0) {\r\n      if (squares[i] === squares[i + 1] && squares[i] === squares[i + 2]) {\r\n        return squares[i];\r\n      }\r\n    }\r\n\r\n    if(squares[i] != null && i < 3) {\r\n      if (squares[i] === squares[i + 3] && squares[i] === squares[i + 6]) {\r\n        return squares[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (squares[0] === squares[4] && squares[0] === squares[8]) {\r\n    return squares[0];\r\n  }\r\n\r\n  if (squares[2] === squares[4] && squares[2] === squares[6]) {\r\n    return squares[2];\r\n  }\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Game from \"./components/Game\";\r\n\r\nReactDom.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}